@use "sass:math";
@import "./utils.scss";
@import "./variable.scss";

// variable
$fz-base-size: 16; // px font base for 100% (default for most browser)

// prettier-ignore
$interpolate-fz-map: (
  "min":  (width: 359px, fontSize: 12px),
  "p1":   (width: 360px,  fontSize: 13px),
  "p2":   (width: 768px, fontSize: 15px),
  "p3":   (width: 1920px, fontSize: 18px),
  "p4":   (width: 2538px, fontSize: 22px),
  "max":  (width: 2539px, fontSize: 25px)
);

@mixin interpolate-font-system {
  $min: map-get($interpolate-fz-map, "min");

  $pre: null; // keep track previous value
  font-size: #{math.div(strip-unit(map-get($min, "fontSize")), $fz-base-size)}rem;
  @each $name, $vals in $interpolate-fz-map {
    @if ($name != "min" and $name != "max") {
      @if ($pre != null) {
        // rem convert
        $psize: strip-unit(math.div(map-get($pre, "fontSize"), $fz-base-size)) * 1rem;
        $pwidth: strip-unit(math.div(map-get($pre, "width"), $fz-base-size)) * 1rem;
        $size: strip-unit(math.div(map-get($vals, "fontSize"), $fz-base-size)) * 1rem;
        $width: strip-unit(math.div(map-get($vals, "width"), $fz-base-size)) * 1rem;
        $pwidthpx: map-get($pre, "width");

        @media (min-width: #{$pwidthpx}) {
          @include font-map2($psize, $size, $pwidth, $width);
        }
      }

      $pre: $vals; // assign
    }
  }
  // max
  $max: map-get($interpolate-fz-map, "max");
  @media (min-width: #{map-get($max, 'width')}) {
    font-size: #{math.div(strip-unit(map-get($max, "fontSize")), $fz-base-size)}rem;
  }
}

// prettier-ignore
// $fz-system-map: (
//   "text-h1": (  large: (font-size: lrem(54px), line-height: lrem(65px), font-weight: 700, margin: 0),
//                 small: (font-size: srem(28px), line-height: srem(36px), font-weight: 700, margin: 0)),
//   "text-h2": (  large: (font-size: lrem(40px), line-height: lrem(48px), font-weight: 700, margin-bottom: 0.35em, margin: 0),
//                 small: (font-size: srem(24px), line-height: srem(30px), font-weight: 700, margin-bottom: 0.35em, margin: 0)),
//   "text-h3": (  large: (font-size: lrem(24px), line-height: lrem(30px), font-weight: 700, margin: 0),
//                 small: (font-size: srem(20px), line-height: srem(24px), font-weight: 700, margin: 0)),
//   "text-subtitle": (  large: (font-size: lrem(20px), line-height: lrem(24px), font-weight: 400, margin: 0),
//                       small: (font-size: srem(18px), line-height: srem(22px), font-weight: 400, margin: 0)),
//   "text-body1": ( large: (font-size: lrem(18px), line-height: lrem(22px), font-weight: 400, margin: 0),
//                   small: (font-size: srem(16px), line-height: srem(18px), font-weight: 400, margin: 0)),
//   "text-body2": ( large: (font-size: lrem(16px), line-height: lrem(20px), font-weight: 400, margin: 0),
//                   small: (font-size: srem(14px), line-height: srem(16px), font-weight: 400, margin: 0)),
//   "text-body3": ( large: (font-size: lrem(14px), line-height: lrem(18px), font-weight: 400, margin: 0),
//                   small: (font-size: srem(10px), line-height: srem(12px), font-weight: 400, margin: 0)),
//   "text-small": ( large: (font-size: lrem(10px), line-height: lrem(12px), font-weight: 400, margin: 0),
//                   small: (font-size: srem(10px), line-height: srem(12px), font-weight: 400, margin: 0)),
// );

// prettier-ignore
$fz-modular-system-map: (
  "text-h1": (ratio: 4,  props: (line-height: 1.25, font-weight: 700, margin: 0)),
  "text-h2": (ratio: 3,  props: (line-height: 1.25, font-weight: 700, margin: 0 0 0.35em 0)),
  "text-h3": (ratio: 2,  props: (line-height: 1.25, font-weight: 700, margin: 0)),
  "text-subtitle": (ratio: 1,  props: (line-height: 1.2, font-weight: 400, margin: 0)),
  "text-body1": (ratio: 0, props: (line-height: 1.25, font-weight: 400, margin: 0)),
  "text-body2": (ratio: -1,  props: (line-height: 1.25, font-weight: 400, margin: 0)),
  "text-body3": (ratio: -2,  props: (line-height: 1.3, font-weight: 400, margin: 0)),
  "text-small": (ratio: -3,  props: (line-height: 1.3, font-weight: 400, margin: 0)),
);

@mixin font-val($font-setting) {
  @each $prop, $val in $font-setting {
    #{$prop}: #{$val};
  }
}

// @mixin font-system1 {
//   @each $name, $vals in $fz-system-map {
//     .#{$name} {
//       @include font-val(map-get($vals, "small"));
//       @include mq(tablet) {
//         @include font-val(map-get($vals, "large"));
//       }
//     }

//     .s\:#{$name} {
//       @include font-val(map-get($vals, "small"));
//     }

//     .l\:#{$name} {
//       @include mq(tablet) {
//         @include font-val(map-get($vals, "large"));
//       }
//     }
//   }
// }

@mixin font-system {
  //  predefine var
  $screen-size-min: 360;
  $screen-size-max: 1920;
  $scale-ratio-large: 1.33;
  $scale-ratio-small: 1.2;
  $size-large: 16;
  $size-small: 14;
  $size-minium-large: math.div(10, $size-large);
  $size-minium-small: math.div(10, $size-small);

  $min-width: math.div($screen-size-min, $fz-base-size) * 1rem;
  $max-width: math.div($screen-size-max, $fz-base-size) * 1rem;

  // modifer class should has more priority than main
  @each $variant in ("main", "modifier") {
    @each $name, $vals in $fz-modular-system-map {
      $ratio: map-get($vals, "ratio");
      $size-min: math.div(pow($scale-ratio-small, $ratio) * $size-small, $fz-base-small);
      $size-max: math.div(pow($scale-ratio-large, $ratio) * $size-large, $fz-base-large);

      $size-min: if($size-min < $size-minium-small, $size-minium-small, $size-min) * 1rem;
      $size-max: if($size-max < $size-minium-large, $size-minium-large, $size-max) * 1rem;

      @if $variant == "main" {
        .#{$name} {
          font-size: toFixed($size-min);
          @media (min-width: #{$screen-size-min}px) {
            @include font-map2($size-min, $size-max, $min-width, $max-width);
          }
          @media (min-width: #{$screen-size-max}px) {
            font-size: toFixed($size-max);
          }
          @include font-val(map-get($vals, "props"));
        }
      }

      @if $variant == "modifier" {
        .s\:#{$name} {
          @include mq(tablet-lt) {
            font-size: toFixed($size-min);
            @include font-val(map-get($vals, "props"));
          }
        }

        .l\:#{$name} {
          @include mq(tablet) {
            font-size: toFixed($size-max);
            @include font-val(map-get($vals, "props"));
          }
        }
      }
    }
  }
}
