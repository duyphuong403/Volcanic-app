// prettier-ignore
{
  // Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
	// }

  "Nextjs getStaticProps": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact ",
		"prefix": "nsprop",
		"body": [
      "export const getStaticProps: GetStaticProps = async (context: GetStaticPropsContext) => {",
        "\t$0",
        "\treturn {",
        "\t\tprops: {},",
        "\t};",
      "};"
		],
		"description": "Nextjs getStaticProps function"
	},

  "Nextjs get custom static props": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact ",
		"prefix": "ncsprop",
		"body": [
      "export const getStatic${1:Name}Props = async (context: GetStaticPropsContext): Promise<Record<string, any> | null> => {",
        "\t$0",
        "\treturn {",
        "\t\t",
        "\t};",
      "};"
		],
		"description": "Nextjs get custom static props function"
	},

  "Nextjs getStaticPaths": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact ",
		"prefix": "nspath",
		"body": [
      "export const getStaticPaths: GetStaticPaths = async () => {",
      "\t$0",
      "\treturn {",
      "\t\tpaths: [],",
      "\t\tfallback: \"blocking\",",
      "\t};",
      "};",
		],
		"description": "Nextjs getStaticPaths function"
	},

  "Nextjs get custom static paths": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact ",
		"prefix": "ncspath",
		"body": [
      "export const getStatic${1:Name}Paths: CustomGetStaticPaths = async (context: GetStaticPathsContext) => {",
        "\t$0",
        "\treturn []",
      "};"
		],
		"description": "Nextjs get custom static paths function"
	},

  "Nextjs getServerSideProps": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact ",
		"prefix": "nssprop",
		"body": [
      "export const getServerSideProps: GetServerSideProps = async (context: GetServerSidePropsContext) => {",
        "\t$0",
        "\treturn {",
        "\t\tprops: {},",
        "\t};",
      "};"
		],
		"description": "Nextjs getServerSideProps function"
	},

  "Nextjs get custom server side props": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact ",
		"prefix": "ncssprop",
		"body": [
      "export const getServerSide${1:Name}Props = async (context: GetServerSidePropsContext): Promise<Record<string, any> | null> => {",
        "\t$0",
        "\treturn {",
        "\t\t",
        "\t};",
      "};"
		],
		"description": "Nextjs get custom server side props function"
	},

  "Nextjs Page with Static Props": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact ",
		"prefix": "npsprop",
		"body": [
      "export default function ${1:CompName}(props: InferGetStaticPropsType<typeof getStaticProps>) {",
      "\treturn ($0)",
      "}"
		],
		"description": "Nextjs Page with Static Props component"
	},

  "Nextjs Page with Server Side Props": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact ",
		"prefix": "npssprop",
		"body": [
      "export default function ${1:CompName}(props: InferGetServerSidePropsType<typeof getServerSideProps>) {",
      "\treturn ($0)",
      "}"
		],
		"description": "Nextjs Page with Server Side Props component"
	},

  "Nextjs API Routes": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact ",
		"prefix": "napi",
		"body": [
      "export default (req: NextApiRequest, res: NextApiResponse) => {",
      "\t$0",
      "}"
		],
		"description": "Nextjs API function"
	},

  "Nextjs Page Data utils": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact ",
		"prefix": "npdata",
		"body": [
      "export const use${1:PageName}Data = () => {",
      "\tconst { data: ${2:dataName} } = useStaticData<${3:DataType}>(\"${2:dataName}\", {",
      "\t\turl: API_CLIENT_GRAPH,",
      "\t\tmethod: \"POST\",",
      "\t\tbodyData: { query: ${4:dataQuery} },",
      "\t\tselector: \"data.${2:dataName}\",",
      "\t});",
      "$0",
      "\treturn 2:dataName;",
      "",
      "const getStatic${1:PageName}Data = async (context: GetStaticPropsContext): Promise<Record<string, any> | null> => {",
      "\tconst response = await sapi.post<{ data: { ${2:dataName}: ${3:DataType} } }>(\"/graphql\", { query: ${4:dataQuery} }, { mock: \"${2:dataName}\" });",
      "",
      "\tconst ${2:dataName} = response?.data.${2:dataName} || null;",
      
      "\treturn {",
      "\t\t${2:dataName},",
      "\t};",
      "};",
      "",
      "export const getStatic${1:PageName}Props = async (context: GetStaticPropsContext): Promise<Record<string, any> | null> => {",
      "\tconst data = await combineProps(context, getStatic${1:PageName}Data);",
      "",
      "\treturn data;",
      "};"
		],
		"description": "Nextjs Page data Utils"
	},

}
