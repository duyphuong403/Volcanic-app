// prettier-ignore
{
  // Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
	// }

  "Import react": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact ",
		"prefix": "imr",
		"body": "import React from \"react\";",
		"description": "Import react libs"
	},

  "Reactjs function component": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact ",
		"prefix": "fc",
		"body": [
			"const ${1:CompName}: React.FC = () => {",
			"\treturn ( ",
			"\t\t$0",
			"\t);",
			"}",
			"",
			"export default ${1:CompName};"
			
		],
		"description": "React function component"
	},

  "Reactjs function component with props": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact ",
		"prefix": "fcp",
		"body": [
			"export interface $1Props {",
			"\t$2",
			"}",
			"", 
			"const $1 : React.FC<$1Props> = (props) => {",
			"\treturn ($0);",
			"}",
			"", 
			"export default $1;"
			
		],
		"description": "React function component with props"
	},

  "Reactjs forward function component": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact ",
		"prefix": "fcf",
		"body": [
			"export interface $1Props {",
			"\t$2",
			"}",
			"", 
			"const $1 = React.forwardRef<any, React.PropsWithChildren<$1Props>>((props, ref) => {",
			"\treturn ($0);",
			"});",
			"", 
			"export default $1;"
			
		],
		"description": "React forward function component with props"
	},

	"React useState": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "ust",
		"body": [
			"const [${1}, set${1/(.*)/${1:/capitalize}/}] = useState($0);"			
		],
		"description": "React useState hooks"
	},

	"React useEffect": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "uef",
		"body": [
			"useEffect(() => {",
			"\t$0",
			"});"			
		],
		"description": "React useEffect hooks"
	},

	"React callBack": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "ucb",
		"body": [
			"const ${1:callback} = useCallback(() => {",
			"\t$2",
			"},[$0]);"
		],
		"description": "React useCallback hooks"
	},

	"Redux useDispatch": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "udp",
		"body": [
			"const dispatch = useDispatch<Dispatch<$1>>();",
		],
		"description": "Redux useDsipatch hooks"
	},

	// style
  "Import default styles": {
		"scope": "scss,sass",
		"prefix": "ims",
		"body": [
			"@import \"styles/mixin.scss\";",
			"@import \"styles/variable.scss\";"
			
		],
		"description": "Import project default styles"
	},
	
	// utils
	"Console log": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "clg",
		"body": [
			"console.log($0)"
		],
		"description": "Console log"
	},

	// test
	"Test template": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "ttpl",
		"body": [
			"import \"@testing-library/jest-dom\";",
			"import { render, screen } from \"@testing-library/react\";",
			"\n",
			"describe(\"$0\", () => {",
				"\ttest(\"Should render correctly\", () => {",
					"\t\t// 1. Render component need to test",
					"\t\trender(<ComponentToTest />);",
					"\t\t// 2. Select element need to check/interact",
					"\t\tconst element = screen.getByTestId(\"some-id\");",
					"\t\t// 3. Interact with selected elm (click,...)",
					"\t\t// TODO",
					"\t\t// 4. Assert result as expected",
					"\t\texpect(element).toBeInTheDocument();",
				"\t});",
			"});"
		],
		"description": "Test template"

	}
}
